parameters:
- name: verbosity
  displayName: Verbosity
  type: string
  default: minimal
  values:
  - minimal
  - normal
  - detailed
  - diagnostic

trigger: none

strategy:
  matrix:
    bravo-x64:
      arch: 'x64'
      selfcontained: 'true'
      publishmode: 'SELFCONTAINED'
      artifact: 'Bravo.$(AppVersionMajor).$(AppVersionMinor).$(AppVersionPatch).x64'
    bravo-x64-frameworkdependent:
      arch: 'x64'
      selfcontained: 'false'
      publishmode: 'FRAMEWORKDEPENDENT'
      artifact: 'Bravo.$(AppVersionMajor).$(AppVersionMinor).$(AppVersionPatch).x64-frameworkdependent'

pool:
  vmImage: 'windows-latest'

variables:
  configuration: 'Release'
  installerSourcesDirectory: '$(Build.SourcesDirectory)\installer\wix\src\Bravo'

steps:
- task: PowerShell@2
  displayName: 'Set variables'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Computing variables..."
      $url = "$(system.CollectionUri)$(system.TeamProjectId)/_apis/build/builds/$(Build.BuildId)?api-version=5.1"
      $build = Invoke-RestMethod -Uri $url -Headers @{ Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN" } -Method Get
      $buildTime = [datetime]$build.startTime
      $buildNumberRevision = $build.buildNumberRevision
      $midnightTime = (Get-Date -Year $buildTime.Year -Month $buildTime.Month -Day $buildTime.Day -Hour 0 -Minute 0 -Second 0 -Millisecond 0)
      # Build Number - number of days since 2000-01-01 (same algorithm as msbuild)
      $versionBuild = (New-TimeSpan –Start ([datetime]"2000-01-01") –End $buildTime).Days
      # Revision - number of seconds since midnight divided by 2 (same algorithm as msbuild)
      $versionRevision = [math]::Round((New-TimeSpan –Start $midnightTime –End $buildTime).TotalSeconds / 2)
      $buildNumber = '{0:yyyyMMdd}.{1}' -f $buildTime, $buildNumberRevision
      $versionNumber = '{0}.{1}.{2}.{3}' -f "$(AppVersionMajor)", "$(AppVersionMinor)", $versionBuild, $versionRevision
      Write-Host "Setting output variables..."
      Write-Host "##vso[task.setvariable variable=AppBuildNumber;]$buildNumber"
      Write-Host "##vso[task.setvariable variable=AppVersionNumber;]$versionNumber"
      Write-Host "BuildNumber is $buildNumber"
      Write-Host "VersionNumber is $versionNumber"
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
- task: Assembly-Info-NetCore@3
  displayName: 'Update AssemblyInfo'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: 'src\Bravo.csproj'
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    VersionNumber: '$(AppVersionNumber)'
    InformationalVersion: '$(AppVersionInformationalVersion)'
    UpdateBuildNumber: '$(AppBuildNumber)-$(AppVersionNumber)'
    LogLevel: 'verbose'
    FailOnWarning: true
    DisableTelemetry: true
- task: UseDotNet@2
  displayName: 'Use .NET 6.0 SDK'
  inputs:
    packageType: sdk
    version: 6.0.x
- task: DotNetCoreCLI@2
  displayName: '.NET restore'
  inputs:
    command: 'restore'
    projects: '@(src|test)/**/*.csproj'
    feedsToUse: 'select'
    verbosityRestore: '${{ parameters.verbosity }}'
- task: DotNetCoreCLI@2
  displayName: '.NET build'
  inputs:
    command: 'build'
    projects: 'src/**/*.csproj'
    arguments: '--configuration "$(configuration)" --no-restore --verbosity ${{ parameters.verbosity }} /p:ContinuousIntegrationBuild="true" /p:AdditionalConstants="$(publishmode)" /m'
- task: DotNetCoreCLI@2
  displayName: '.NET test'
  inputs:
    command: 'test'
    projects: 'test/*Tests/*.csproj'
    arguments: '--no-restore --verbosity ${{ parameters.verbosity }} --logger "trx;LogFilePrefix=testResults" --collect "Code coverage"'
- task: DotNetCoreCLI@2
  displayName: '.NET publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src/Bravo.csproj'
    arguments: '--configuration "$(configuration)" --no-restore --self-contained "$(selfcontained)" --output "$(Build.BinariesDirectory)" --verbosity ${{ parameters.verbosity }} /p:ContinuousIntegrationBuild="true" /p:AdditionalConstants="$(publishmode)" /m'
    zipAfterPublish: false
    modifyOutputPath: false
- task: DotNetCoreCLI@2
  displayName: 'Install AzureSignTool'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global azuresigntool --version 4.0.1' # Pin to latest version compatible with .NET 6.0
- task: CmdLine@2
  displayName: 'Code signing EXE'
  inputs:
    script: 'AzureSignTool sign -kvu "$(SigningVaultURL)" -kvt "$(SigningTenantId)" -kvi "$(SigningClientId)" -kvs "$(SigningClientSecret)" -kvc "$(SigningCertName)" -tr http://timestamp.digicert.com -v "$(Build.BinariesDirectory)\Bravo.exe"'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX harvest components'
  inputs:
    script: '"%WIX%bin\heat.exe" dir "$(Build.BinariesDirectory)" -gg -scom -srd -sreg -sfrag -template fragment -cg ComponentsAutogenerated -dr INSTALLFOLDER -var var.PublishFolder -t Bravo.xslt -out Components.wxs'
    workingDirectory: '$(installerSourcesDirectory)'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX compile components'
  inputs:
    script: '"%WIX%bin\candle.exe" Components.wxs -dPublishFolder="$(Build.BinariesDirectory)" -arch "$(arch)"'
    workingDirectory: '$(installerSourcesDirectory)'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX compile app'
  inputs:
    script: '"%WIX%bin\candle.exe" Bravo.wxs -dPublishFolder="$(Build.BinariesDirectory)" -dVersion="$(AppVersionInformationalVersion)" -arch "$(arch)"'
    workingDirectory: '$(installerSourcesDirectory)'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX compile app (perUser)'
  inputs:
    script: '"%WIX%bin\candle.exe" Bravo-perUser.wxs -dPublishFolder="$(Build.BinariesDirectory)" -dVersion="$(AppVersionInformationalVersion)" -arch "$(arch)"'
    workingDirectory: '$(installerSourcesDirectory)'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX linker MSI'
  inputs:
    # -sice:ICE03 is used to ignore -> warning LGHT1076 : ICE03: String overflow (greater than length permitted in column). These warnings are expected and can be safely ignored
    # -sice:ICE60 is used to ignore -> warning LGHT1076 : ICE60: The file filE8E88FBC49DC5621FF3FC1B65ADCCB39 is not a Font, and its version is not a companion file reference. It should have a language specified in the Language column.
    # -sice:ICE61 is used to ignore -> warning LGHT1076 : ICE61: This product should remove only older versions of itself. The Maximum version is not less than the current product.
    # -sice:ICE80 is used to ignore -> error   LGHT0204 : ICE80: This 64BitComponent pbitool.json uses 32BitDirectory POWERBIEXTERNALTOOLSFOLDER
    script: '"%WIX%bin\light.exe" Bravo.wixobj Components.wixobj -ext WixUIExtension.dll -ext WixUtilExtension.dll -dPublishFolder="$(Build.BinariesDirectory)" -cultures:en-us -loc Bravo-en-us.wxl -out "$(Build.ArtifactStagingDirectory)\$(artifact).msi" -spdb -sice:ICE03 -sice:ICE60 -sice:ICE61 -sice:ICE80'
    workingDirectory: '$(installerSourcesDirectory)'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX linker MSI (perUser)'
  inputs:
    # -sice:ICE57 is used to ignore -> error   LGHT0204 : ICE57: Component 'app.exe' has both per-user and per-machine data with a per-machine KeyPath.
    # -sice:ICE60 is used to ignore -> warning LGHT1076 : ICE60: The file filE8E88FBC49DC5621FF3FC1B65ADCCB39 is not a Font, and its version is not a companion file reference. It should have a language specified in the Language column.
    # -sice:ICE61 is used to ignore -> warning LGHT1076 : ICE61: This product should remove only older versions of itself. The Maximum version is not less than the current product.
    # -sice:ICE80 is used to ignore -> error   LGHT0204 : ICE80: This 64BitComponent [...] uses 32BitDirectory [...]
    script: '"%WIX%bin\light.exe" Bravo-perUser.wixobj Components.wixobj -ext WixUIExtension.dll -ext WixUtilExtension.dll -dPublishFolder="$(Build.BinariesDirectory)" -cultures:en-us -loc Bravo-en-us.wxl -out "$(Build.ArtifactStagingDirectory)\$(artifact)-userinstaller.msi" -spdb -sice:ICE57 -sice:ICE60 -sice:ICE61 -sice:ICE80'
    workingDirectory: '$(installerSourcesDirectory)'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'Code signing MSI'
  inputs:
    script: 'AzureSignTool sign -kvu "$(SigningVaultURL)" -kvt "$(SigningTenantId)" -kvi "$(SigningClientId)" -kvs "$(SigningClientSecret)" -kvc "$(SigningCertName)" -tr http://timestamp.digicert.com -v "$(Build.ArtifactStagingDirectory)\$(artifact).msi"'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'Code signing MSI (perUser)'
  inputs:
    script: 'AzureSignTool sign -kvu "$(SigningVaultURL)" -kvt "$(SigningTenantId)" -kvi "$(SigningClientId)" -kvs "$(SigningClientSecret)" -kvc "$(SigningCertName)" -tr http://timestamp.digicert.com -v "$(Build.ArtifactStagingDirectory)\$(artifact)-userinstaller.msi"'
    failOnStderr: true
- task: ArchiveFiles@2
  displayName: 'Portable ZIP archive'
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifact)-portable.zip'
    replaceExistingArchive: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts to DevOps Pipeline'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'