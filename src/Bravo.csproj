<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6-windows10.0.17763.0</TargetFramework>
    <RuntimeIdentifier>win-x64</RuntimeIdentifier>
    <Platforms>x64</Platforms>
    <ApplicationIcon>wwwroot\bravo.ico</ApplicationIcon>
    <Company>SQLBI</Company>
    <Authors>SQLBI</Authors>
    <Product>Bravo for Power BI</Product>
    <Copyright>SQLBI Corporation</Copyright>
    <RootNamespace>Sqlbi.$(MSBuildProjectName.Replace(" ", "_"))</RootNamespace>
    <Nullable>enable</Nullable>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <Configurations>$(Configurations);Debug_wwwroot</Configurations>
    <AnalysisLevel>latest</AnalysisLevel>
    <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug_wwwroot'">
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <RestoreSources>$(RestoreSources);./Assets/nupkgs;https://api.nuget.org/v3/index.json</RestoreSources>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Don't change version here -->
    <Version>0.0.0.999</Version>
    <InformationalVersion>0.0.0.999-DEV</InformationalVersion>
  </PropertyGroup>

  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(AssemblyName).Tests</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CsvHelper" Version="27.2.1" />
    <PackageReference Include="Dax.Template" Version="0.1.0-beta21" />
    <PackageReference Include="Dax.Formatter" Version="1.0.0" />
    <PackageReference Include="Dax.ViewModel" Version="1.2.4" />
    <PackageReference Include="Dax.Vpax.NetCore" Version="1.2.4" />
    <PackageReference Include="Hellang.Middleware.ProblemDetails" Version="6.4.0" />
    <PackageReference Include="LargeXlsx" Version="1.5.0" />
    <PackageReference Include="Macross.Json.Extensions" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.ApplicationInsights" Version="2.20.0" />
    <PackageReference Include="Microsoft.Identity.Client" Version="4.40.0" />
    <PackageReference Include="Microsoft.Toolkit.Uwp.Notifications" Version="7.1.2" />
    <PackageReference Include="Photino.NET" Version="2.1.11" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.2.3" />
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta1.21308.1" />
  </ItemGroup>

  <ItemGroup>
    <None Include="wwwroot\**">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Antlr4.Runtime">
      <HintPath>Assets\lib\Antlr4.Runtime.dll</HintPath>
    </Reference>
    <Reference Include="TOMWrapper">
      <HintPath>Assets\lib\TOMWrapper.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <Content Update="Assets\ManageDates\Templates\*.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- 
  ** The following custom MSBuild targets add the static client web assets into the build process
  ** - ClientAssetsRestore => restore client web assets from npm
  ** - ClientAssetsBuild   => run npm build and collect the outputs as static web assets (wwwroot)
  ** - DefineClientAssets  => capture all the files in the output content and link them to the wwwroot folder - this target run only when the sources are changed
  **
  ** https://devblogs.microsoft.com/dotnet/build-client-web-assets-for-your-razor-class-library/ 
  ** https://github.com/aspnet/AspLabs/blob/main/src/ClientAssets/Microsoft.AspNetCore.ClientAssets/build/netstandard2.0/Microsoft.AspNetCore.ClientAssets.targets
  ** https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/february/msbuild-best-practices-for-creating-reliable-builds-part-1
  -->

  <PropertyGroup>
    <ClientAssetsDirectory Condition="'$(ClientAssetsDirectory)' == ''">Scripts\</ClientAssetsDirectory>
    <ClientAssetsRestoreInputs Condition="'$(ClientAssetsRestoreInputs)' == ''">$(ClientAssetsDirectory)package-lock.json;$(ClientAssetsDirectory)package.json</ClientAssetsRestoreInputs>
    <ClientAssetsRestoreOutputs Condition="'$(ClientAssetsRestoreOutputs)' == ''">$(ClientAssetsDirectory)node_modules\.package-lock.json</ClientAssetsRestoreOutputs>
    <ClientAssetsEnabled Condition="'$(Configuration)' != 'Debug_wwwroot'">true</ClientAssetsEnabled>
  </PropertyGroup>

  <ItemGroup>
    <ClientAssetsInputs Include="$(ClientAssetsDirectory)**" Exclude="$(DefaultItemExcludes)" />
  </ItemGroup>

  <!--
  Target Name="EnsureNodeJsInstalled" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('Scripts\dist') ">
    <Message Importance="high" Text="::EnsureNodeJsInstalled - retreiving Node.js version ..." />
    <Exec Command="node - - version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project." />
  </Target
  -->

  <Target Name="ClientAssetsRestore" Condition="'$(ClientAssetsEnabled)' == 'true'" BeforeTargets="Build" Inputs="$(ClientAssetsRestoreInputs)" Outputs="$(ClientAssetsRestoreOutputs)">
    <Message Importance="high" Text="::ClientAssetsRestore - running 'npm install' ..." />
    <Exec Command="npm install" WorkingDirectory="$(ClientAssetsDirectory)" />
  </Target>

  <Target Name="ClientAssetsBuild" Condition="'$(ClientAssetsEnabled)' == 'true'" DependsOnTargets="ClientAssetsRestore" BeforeTargets="AssignTargetPaths" Inputs="@(ClientAssetsInputs)" Outputs="$(IntermediateOutputPath)clientassetsbuild.complete.txt">
    <PropertyGroup>
      <_ClientAssetsOutputFullPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)clientassets'))\</_ClientAssetsOutputFullPath>
    </PropertyGroup>
    <MakeDir Directories="$(_ClientAssetsOutputFullPath)" />
    <Message Importance="high" Text="::ClientAssetsBuild - running 'npm run build:$(Configuration)' ..." />
    <Exec Command="npm run build:$(Configuration) -- --output-path $(_ClientAssetsOutputFullPath)" WorkingDirectory="$(ClientAssetsDirectory)" />
    <ItemGroup>
      <_ClientAssetsBuildOutput Include="$(IntermediateOutputPath)clientassets\**"></_ClientAssetsBuildOutput>
    </ItemGroup>
    <WriteLinesToFile File="$(IntermediateOutputPath)clientassetsbuild.complete.txt" Lines="@(_ClientAssetsBuildOutput)" />
  </Target>

  <Target Name="DefineClientAssets" Condition="'$(ClientAssetsEnabled)' == 'true'" AfterTargets="ClientAssetsBuild">
    <Message Importance="high" Text="::DefineClientAssets - started ..." />
    <ItemGroup>
      <FileWrites Include="@(_ClientAssetsBuildOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)clientassetsbuild.complete.txt" />
      <Message Importance="high" Text="::DefineClientAssets - link 'wwwroot\%(_ClientAssetsBuildOutput.RecursiveDir)\%(_ClientAssetsBuildOutput.FileName)%(_ClientAssetsBuildOutput.Extension)' ..." />
      <Content Include="@(_ClientAssetsBuildOutput)" Link="wwwroot\%(_ClientAssetsBuildOutput.RecursiveDir)\%(_ClientAssetsBuildOutput.FileName)%(_ClientAssetsBuildOutput.Extension)">
        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      </Content>
    </ItemGroup>
  </Target>

</Project>
